name: CI

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  # Code linting job
  lint:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Install project dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Run linting
      - name: Run Linting
        run: |
          ./ci/lint.sh

  # Job to retrieve and validate the last commit message
  commit-message:
    runs-on: ubuntu-latest
    needs: lint

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Extract the latest commit message
      - name: Set commit message
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%s)
          echo "commit_message=${COMMIT_MSG}" >> $GITHUB_ENV

      # Debug: print the latest commit message
      - name: Debug commit message
        run: |
          echo "The latest commit message is : $commit_message"

      # Validate the commit message
      - name: Validate commit message
        run: |
          ./ci/check_commits.sh "$commit_message"

  # Testing job (including model training and starting server/client)
  tests:
    runs-on: ubuntu-latest
    needs: commit-message

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Install project dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Setup dataset (e.g., download, preprocess)
      - name: Setup dataset
        run: |
          set -e
          make setup-dataset

      # Train the model
      - name: Train model
        run: |
          set -e
          make train

      # Create necessary directories
      - name: Create necessary directories
        run: |
          mkdir -p models/fhe_files
          mkdir -p src/fhe_file

      # Run the server in the background
      - name: Run server in background
        run: |
          set -e
          nohup make run_server > server.log 2>&1 &
          echo "Waiting for server to start..."
          sleep 15
          for i in {1..30}; do
            if curl -s http://0.0.0.0:8000/docs > /dev/null; then
              echo "Server is up!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "Server failed to start"
              cat server.log
              exit 1
            fi
            echo "Waiting for server... attempt $i"
            sleep 1
          done

      # Run the client in the background
      - name: Run client in background
        run: |
          set -e
          nohup make run_client > client.log 2>&1 &
          echo "Waiting for client to start..."
          sleep 15
          for i in {1..30}; do
            if curl -s http://127.0.0.1:8001/docs > /dev/null; then
              echo "Client is up!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "Client failed to start"
              cat client.log
              exit 1
            fi
            echo "Waiting for client... attempt $i"
            sleep 1
          done

      # Run the tests
      - name: Run tests
        run: |
          set -e
          make test || (echo "Tests failed! Server log:" && cat server.log && echo "Client log:" && cat client.log && exit 1)

  # Job to run Jupyter notebooks and verify they execute properly
  run-notebooks:
    runs-on: ubuntu-latest
    needs: tests

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      # Install dependencies (including Jupyter and nbconvert)
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install jupyter nbconvert

      # Execute all notebooks found, excluding those in hidden directories (./.*)
      - name: Test Jupyter notebooks
        run: |
          set -e
          for notebook in $(find . -name "*.ipynb" -not -path "./.*"); do
            jupyter nbconvert --to notebook --execute --inplace "$notebook" || exit 1
          done

  # Documentation build job
  # build-documentation:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3
  #
  #     - name: Set up Python
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: '3.x'
  #
  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -r requirements.txt
  #
  #     - name: Build documentation
  #       run: |
  #         cd docsource
  #         make html
  #
  #     - name: Upload documentation artifact
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: documentation
  #         path: docsource/build/html
